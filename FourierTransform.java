import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.linear.*;
import org.apache.commons.math3.transform.DftNormalization;
import org.apache.commons.math3.transform.FastFourierTransformer;
import org.apache.commons.math3.transform.TransformType;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

import javax.swing.*;
import java.awt.*;
import java.io.IOException;
import java.nio.file.*;
import java.util.*;
import java.util.List;
import java.util.stream.*;

public class FourierTransform {

    // –ß–∞—Å–æ–≤–∏–π –∫—Ä–æ–∫ (—ñ–Ω—Ç–µ—Ä–≤–∞–ª) –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫—É.
    private static final int T = 5;

    public static void main(String[] args) throws IOException {
        System.out.println("–ß–∏—Ç–∞—î–º–æ –¥–∞–Ω—ñ –∑ —Ñ–∞–π–ª—É...");

        double[] Y;
        double[] X;
        // –ó—á–∏—Ç—É—î–º–æ –¥–∞–Ω—ñ –∑ —Ñ–∞–π–ª—É f13.txt, —Ä–æ–∑–¥—ñ–ª—è—î–º–æ —ó—Ö –∑–∞ –ø—Ä–æ–±—ñ–ª–∞–º–∏ —Ç–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ —É –º–∞—Å–∏–≤ double
        try (Stream<String> stream = Files.lines(Paths.get("f13.txt"))) {
            Y = stream.flatMap(line -> Arrays.stream(line.split("\\s+")))
                    .mapToDouble(Double::parseDouble)
                    .toArray();
            X = IntStream.range(0, Y.length)
                    .mapToDouble(i -> T * ((double) i / Y.length))
                    .toArray();
        }

        System.out.println("–î–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ. –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ—á–æ–∫: " + Y.length);
        System.out.println("–ë—É–¥—É–µ–º–æ –≥—Ä–∞—Ñ—ñ–∫ \"–ü–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ\"...");
        plotGraph("–ü–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ", X, Y);

        System.out.println("–ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π–±–ª–∏–∂—á–∏–π —Å—Ç—É–ø—ñ–Ω—å –¥–≤—ñ–π–∫–∏...");
        // –í–∏–∑–Ω–∞—á–∞—î–º–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –º–∞—Å–∏–≤—É –¥–ª—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –§—É—Ä'—î (—Å—Ç—É–ø—ñ–Ω—å 2)
        int paddedLength = 1;
        while (paddedLength < Y.length) {
            paddedLength *= 2;
        }
        System.out.println("–ù–∞–π–±–ª–∏–∂—á–∏–π —Å—Ç—É–ø—ñ–Ω—å –¥–≤—ñ–π–∫–∏: " + paddedLength);


        System.out.println("–î–æ–¥–∞—î–º–æ –Ω—É–ª—ñ –¥–æ –º–∞—Å–∏–≤—É –¥–∞–Ω–∏—Ö...");
        double[] paddedY = new double[paddedLength];
        System.arraycopy(Y, 0, paddedY, 0, Y.length);

        System.out.println("–í–∏–∫–æ–Ω—É—î–º–æ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –§—É—Ä'—î...");
        // –í–∏–∫–æ–Ω—É—î–º–æ —à–≤–∏–¥–∫–µ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –§—É—Ä'—î —Ç–∞ –æ—Ç—Ä–∏–º—É—î–º–æ –º–æ–¥—É–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        FastFourierTransformer fft = new FastFourierTransformer(DftNormalization.STANDARD);
        Complex[] complexResults = fft.transform(paddedY, TransformType.FORWARD);
        double[] Fur = Arrays.stream(complexResults).mapToDouble(Complex::abs).toArray();
        System.out.println("–ë—É–¥—É–µ–º–æ –≥—Ä–∞—Ñ—ñ–∫ \"–ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –§—É—Ä'—î\"...");
        plotGraph("–ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –§—É—Ä'—î", X, Fur);

        System.out.println("–ë–µ—Ä–µ–º–æ –ø–æ–ª–æ–≤–∏–Ω—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –§—É—Ä'—î...");
        double[] Furh = Arrays.copyOfRange(Fur, 0, Y.length / 2);
        double[] N1 = IntStream.range(0, Furh.length).mapToDouble(i -> (double) i / T).toArray();
        double[] N2 = Arrays.copyOfRange(N1, 0, Y.length / 2);
        System.out.println("–ë—É–¥—É–µ–º–æ –≥—Ä–∞—Ñ—ñ–∫ \"–ü–æ–ª–æ–≤–∏–Ω–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –§—É—Ä'—î\"...");
        plotGraph("–ü–æ–ª–æ–≤–∏–Ω–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –§—É—Ä'—î", N2, Furh);

        System.out.println("–ü–æ—à—É–∫ –ª–æ–∫–∞–ª—å–Ω–∏—Ö –º–∞–∫—Å–∏–º—É–º—ñ–≤...");
        // –í–∏–∑–Ω–∞—á–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ –º–∞–∫—Å–∏–º—É–º–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ –§—É—Ä'—î
        List<Integer> extr = new ArrayList<>();
        for (int i = 9; i < Furh.length; i++) {
            boolean isMax = true;
            for (int j = 1; j <= 9; j++) {
                if (!(Furh[i] > Furh[i - j])) {
                    isMax = false;
                    break;
                }
            }
            if (isMax) {
                extr.add(i);
            }
        }
        extr = extr.stream().filter(e -> e >= T).collect(Collectors.toList());
        int max1 = Math.round((float)extr.get(0) / T);
        System.out.println("–ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –Ω–∞–π–±—ñ–ª—å—à–æ–≥–æ –≤–ø–ª–∏–≤—É. –Ü—Å–Ω—É—î –≤ —Ç–æ—á—Ü—ñ:");
        System.out.println("ùúó1 = " + max1);

        System.out.println("–ë—É–¥—É—î–º–æ —Ç–∞ —Ä–æ–∑–≤‚Äô—è–∑—É—î–º–æ —Å–∏—Å—Ç–µ–º—É —Ä—ñ–≤–Ω—è–Ω—å, —â–æ–± –∑–Ω–∞–π—Ç–∏ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏:");
        //–ë—É–¥—É—î–º–æ —Ç–∞ —Ä–æ–∑–≤'—è–∑—É—î–º–æ —Å–∏—Å—Ç–µ–º—É —Ä—ñ–≤–Ω—è–Ω—å –¥–ª—è –∞–ø—Ä–æ–∫—Å–∏–º–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö
        double[][] coefficientsArray = new double[5][5];
        double[] constantsArray = new double[5];

        double[][][] computedValues = {
                // –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ –¥–ª—è —Ä—ñ–≤–Ω—è–Ω—å
                compute(X, Y, max1, 1),
                compute(X, Y, max1, 2),
                compute(X, Y, max1, 3),
                compute(X, Y, max1, 4),
                compute(X, Y, max1, 5)
        };

        for (int i = 0; i < 5; i++) {
            coefficientsArray[i] = computedValues[i][0];
            constantsArray[i] = computedValues[i][1][0];
        }

        String[] equations = {"x^3", "x^2", "x", "sin(2œÄ" + max1 + "x)", "const"};
        for (int i = 0; i < 5; i++) {
            StringBuilder equation = new StringBuilder();
            for (int j = 0; j < 5; j++) {
                equation.append(coefficientsArray[j][i]).append(" * ").append(equations[j]).append(" + ");
            }
            equation.delete(equation.length() - 3, equation.length());
            equation.append("= ").append(constantsArray[i]);
            System.out.println(equation);
        }

        RealMatrix coefficients = new Array2DRowRealMatrix(5, 5);
        double[] constants = new double[5];

        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 5; j++) {
                coefficients.setEntry(i, j, computedValues[j][0][i]);
            }
            constants[i] = computedValues[i][1][0];
        }

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ—Ç–æ–¥ LUDecomposition –¥–ª—è —Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –ª—ñ–Ω—ñ–π–Ω–∏—Ö —Ä—ñ–≤–Ω—è–Ω—å
        DecompositionSolver solver = new LUDecomposition(coefficients).getSolver();
        RealVector solution = solver.solve(new ArrayRealVector(constants, false));

        System.out.println("–†–æ–∑–≤'—è–∑—É—î–º–æ —Ä—ñ–≤–Ω—è–Ω–Ω—è");
        for (int i = 0; i < 5; i++) {
            System.out.println("–†–æ–∑–≤'—è–∑–æ–∫ " + (i + 1) + ": " + solution.getEntry(i));
        }

        // –û–±—á–∏—Å–ª—é—î–º–æ –∞–ø—Ä–æ–∫—Å–∏–º–æ–≤–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è y –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç—ñ–≤
        double[] yApproximated = new double[X.length];
        for (int i = 0; i < X.length; i++) {
            yApproximated[i] = solution.getEntry(0) * Math.pow(X[i], 3)
                    + solution.getEntry(1) * Math.pow(X[i], 2)
                    + solution.getEntry(2) * X[i]
                    + solution.getEntry(3) * Math.sin(2 * Math.PI * max1 * X[i])
                    + solution.getEntry(4);
        }
        // –í–∏–≤–æ–¥–∏–º–æ –æ—Ç—Ä–∏–º–∞–Ω—É –∞–ø—Ä–æ–∫—Å–∏–º—É—é—á—É —Ñ—É–Ω–∫—Ü—ñ—é
        System.out.println("–û—Ç—Ä–∏–º–∞–Ω–∞ –∞–ø—Ä–æ–∫—Å–∏–º—É—é—á–∞ —Ñ—É–Ω–∫—Ü—ñ—è:");
        String function = solution.getEntry(0) + " * x^3 + "
                + solution.getEntry(1) + " * x^2 + "
                + solution.getEntry(2) + " * x + "
                + solution.getEntry(3) + " * sin(2œÄ" + max1 + "x) + "
                + solution.getEntry(4);
        System.out.println("y(x) = " + function);

        double error = 0.0;
        for (int i = 0; i < Y.length; i++) {
            error += Math.pow(yApproximated[i] - Y[i], 2);
        }
        System.out.println("–ü–æ–º–∏–ª–∫–∞: " + error);

        System.out.println("–ë—É–¥—É–µ–º–æ –≥—Ä–∞—Ñ—ñ–∫ \"–ù–∞–±–ª–∏–∂–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è\"...");
        plotGraph("–ù–∞–±–ª–∏–∂–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è", X, yApproximated);
    }

    /**
     * –û–±—á–∏—Å–ª—é—î –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ –¥–ª—è —Ä—ñ–≤–Ω—è–Ω—å —Å–∏—Å—Ç–µ–º–∏, —è–∫—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –¥–ª—è –∞–ø—Ä–æ–∫—Å–∏–º–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö.
     *
     * @param X     –º–∞—Å–∏–≤ –∑–Ω–∞—á–µ–Ω—å X –∑ –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö.
     * @param Y     –º–∞—Å–∏–≤ –∑–Ω–∞—á–µ–Ω—å Y –∑ –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö.
     * @param max1  –æ—Å–Ω–æ–≤–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞ –¥–ª—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –§—É—Ä'—î.
     * @param index —ñ–Ω–¥–µ–∫—Å, —â–æ –≤–∏–∑–Ω–∞—á–∞—î —Ç–∏–ø —Ä—ñ–≤–Ω—è–Ω–Ω—è (–≤—ñ–¥ 1 –¥–æ 5).
     * @return      –¥–≤–æ–º—ñ—Ä–Ω–∏–π –º–∞—Å–∏–≤, –¥–µ –ø–µ—Ä—à–∏–π –ø—ñ–¥–º–∞—Å–∏–≤ –≤–∫–ª—é—á–∞—î –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ a1, a2, a3, a4, a5,
     *              –∞ –¥—Ä—É–≥–∏–π –ø—ñ–¥–º–∞—Å–∏–≤ –º—ñ—Å—Ç–∏—Ç—å –æ–¥–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø—Ä–∞–≤—ñ–π —á–∞—Å—Ç–∏–Ω—ñ —Ä—ñ–≤–Ω—è–Ω–Ω—è.
     */
    public static double[][] compute(double[] X, double[] Y, int max1, int index) {
        double a1 = 0, a2 = 0, a3 = 0, a4 = 0, a5 = 0, minus = 0;
        for (int i = 0; i < X.length; i++) {
            double x = X[i];
            double y = Y[i];

            switch (index) {
                case 1 -> {
                    a1 += Math.pow(x, 6);
                    a2 += Math.pow(x, 5);
                    a3 += Math.pow(x, 4);
                    a4 += Math.pow(x, 3) * Math.sin(2 * Math.PI * max1 * x);
                    a5 += Math.pow(x, 3);
                    minus += Math.pow(x, 3) * y;
                }
                case 2 -> {
                    a1 += Math.pow(x, 5);
                    a2 += Math.pow(x, 4);
                    a3 += Math.pow(x, 3);
                    a4 += Math.pow(x, 2) * Math.sin(2 * Math.PI * max1 * x);
                    a5 += Math.pow(x, 2);
                    minus += Math.pow(x, 2) * y;
                }
                case 3 -> {
                    a1 += Math.pow(x, 4);
                    a2 += Math.pow(x, 3);
                    a3 += Math.pow(x, 2);
                    a4 += x * Math.sin(2 * Math.PI * max1 * x);
                    a5 += x;
                    minus += x * y;
                }
                case 4 -> {
                    a1 += Math.pow(x, 3) * Math.sin(2 * Math.PI * max1 * x);
                    a2 += Math.pow(x, 2) * Math.sin(2 * Math.PI * max1 * x);
                    a3 += x * Math.sin(2 * Math.PI * max1 * x);
                    a4 += Math.sin(2 * Math.PI * max1 * x) * Math.sin(2 * Math.PI * max1 * x);
                    a5 += Math.sin(2 * Math.PI * max1 * x);
                    minus += Math.sin(2 * Math.PI * max1 * x) * y;
                }
                case 5 -> {
                    a1 += Math.pow(x, 3);
                    a2 += Math.pow(x, 2);
                    a3 += x;
                    a4 += Math.sin(2 * Math.PI * max1 * x);
                    a5 += 1;
                    minus += y;
                }
            }
        }
        return new double[][]{{a1, a2, a3, a4, a5}, {minus}};
    }

    // –î–æ–ø–æ–º—ñ–∂–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º JFreeChart
    public static void plotGraph(String title, double[] xData, double[] yData) {
        XYSeries series = new XYSeries("–î–∞–Ω—ñ");
        for (int i = 0; i < xData.length; i++) {
            series.add(xData[i], yData[i]);
        }

        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(series);

        JFreeChart chart = ChartFactory.createXYLineChart(
                title,
                "X",
                "Y",
                dataset,
                PlotOrientation.VERTICAL,
                true,
                true,
                false
        );

        JFrame frame = new JFrame();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.add(new ChartPanel(chart));
        frame.pack();

        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension frameSize = frame.getSize();
        int x = (screenSize.width - frameSize.width) / 2;
        int y = (screenSize.height - frameSize.height) / 2;
        frame.setLocation(x, y);

        frame.setVisible(true);
    }

}


